
led_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d20  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001ea8  08001ea8  00002ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ed8  08001ed8  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ed8  08001ed8  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ed8  08001ed8  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ed8  08001ed8  00002ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001edc  08001edc  00002edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001ee0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000300c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0000300c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0000300c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003936  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e30  00000000  00000000  00006972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003c8  00000000  00000000  000077a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002b1  00000000  00000000  00007b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018e6a  00000000  00000000  00007e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004d6d  00000000  00000000  00020c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009219b  00000000  00000000  000259f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b7b93  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d28  00000000  00000000  000b7bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  000b8900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001e90 	.word	0x08001e90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001e90 	.word	0x08001e90

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f912 	bl	80003f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80e 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f848 	bl	8000268 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001d8:	2108      	movs	r1, #8
 80001da:	4804      	ldr	r0, [pc, #16]	@ (80001ec <main+0x24>)
 80001dc:	f000 fc04 	bl	80009e8 <HAL_GPIO_TogglePin>
	 HAL_Delay(100);
 80001e0:	2064      	movs	r0, #100	@ 0x64
 80001e2:	f000 f96d 	bl	80004c0 <HAL_Delay>
	 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001e6:	bf00      	nop
 80001e8:	e7f6      	b.n	80001d8 <main+0x10>
 80001ea:	bf00      	nop
 80001ec:	48000400 	.word	0x48000400

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b090      	sub	sp, #64	@ 0x40
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	2228      	movs	r2, #40	@ 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 fe1a 	bl	8001e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000212:	2302      	movs	r3, #2
 8000214:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021a:	2310      	movs	r3, #16
 800021c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800021e:	2300      	movs	r3, #0
 8000220:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000222:	f107 0318 	add.w	r3, r7, #24
 8000226:	4618      	mov	r0, r3
 8000228:	f000 fbf8 	bl	8000a1c <HAL_RCC_OscConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000232:	f000 f849 	bl	80002c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000236:	230f      	movs	r3, #15
 8000238:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800023a:	2300      	movs	r3, #0
 800023c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f001 fc22 	bl	8001a98 <HAL_RCC_ClockConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800025a:	f000 f835 	bl	80002c8 <Error_Handler>
  }
}
 800025e:	bf00      	nop
 8000260:	3740      	adds	r7, #64	@ 0x40
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b086      	sub	sp, #24
 800026c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800027c:	4b10      	ldr	r3, [pc, #64]	@ (80002c0 <MX_GPIO_Init+0x58>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	4a0f      	ldr	r2, [pc, #60]	@ (80002c0 <MX_GPIO_Init+0x58>)
 8000282:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000286:	6153      	str	r3, [r2, #20]
 8000288:	4b0d      	ldr	r3, [pc, #52]	@ (80002c0 <MX_GPIO_Init+0x58>)
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000290:	603b      	str	r3, [r7, #0]
 8000292:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2108      	movs	r1, #8
 8000298:	480a      	ldr	r0, [pc, #40]	@ (80002c4 <MX_GPIO_Init+0x5c>)
 800029a:	f000 fb8d 	bl	80009b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800029e:	2308      	movs	r3, #8
 80002a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a2:	2301      	movs	r3, #1
 80002a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4619      	mov	r1, r3
 80002b2:	4804      	ldr	r0, [pc, #16]	@ (80002c4 <MX_GPIO_Init+0x5c>)
 80002b4:	f000 fa0e 	bl	80006d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002b8:	bf00      	nop
 80002ba:	3718      	adds	r7, #24
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40021000 	.word	0x40021000
 80002c4:	48000400 	.word	0x48000400

080002c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002cc:	b672      	cpsid	i
}
 80002ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002d0:	bf00      	nop
 80002d2:	e7fd      	b.n	80002d0 <Error_Handler+0x8>

080002d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002da:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <HAL_MspInit+0x44>)
 80002dc:	699b      	ldr	r3, [r3, #24]
 80002de:	4a0e      	ldr	r2, [pc, #56]	@ (8000318 <HAL_MspInit+0x44>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6193      	str	r3, [r2, #24]
 80002e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <HAL_MspInit+0x44>)
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002f2:	4b09      	ldr	r3, [pc, #36]	@ (8000318 <HAL_MspInit+0x44>)
 80002f4:	69db      	ldr	r3, [r3, #28]
 80002f6:	4a08      	ldr	r2, [pc, #32]	@ (8000318 <HAL_MspInit+0x44>)
 80002f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002fc:	61d3      	str	r3, [r2, #28]
 80002fe:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <HAL_MspInit+0x44>)
 8000300:	69db      	ldr	r3, [r3, #28]
 8000302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000306:	603b      	str	r3, [r7, #0]
 8000308:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40021000 	.word	0x40021000

0800031c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000320:	bf00      	nop
 8000322:	e7fd      	b.n	8000320 <NMI_Handler+0x4>

08000324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000328:	bf00      	nop
 800032a:	e7fd      	b.n	8000328 <HardFault_Handler+0x4>

0800032c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000330:	bf00      	nop
 8000332:	e7fd      	b.n	8000330 <MemManage_Handler+0x4>

08000334 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000338:	bf00      	nop
 800033a:	e7fd      	b.n	8000338 <BusFault_Handler+0x4>

0800033c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000340:	bf00      	nop
 8000342:	e7fd      	b.n	8000340 <UsageFault_Handler+0x4>

08000344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800036e:	b580      	push	{r7, lr}
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000372:	f000 f885 	bl	8000480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
	...

0800037c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000380:	4b06      	ldr	r3, [pc, #24]	@ (800039c <SystemInit+0x20>)
 8000382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000386:	4a05      	ldr	r2, [pc, #20]	@ (800039c <SystemInit+0x20>)
 8000388:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800038c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003d8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80003a4:	f7ff ffea 	bl	800037c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a8:	480c      	ldr	r0, [pc, #48]	@ (80003dc <LoopForever+0x6>)
  ldr r1, =_edata
 80003aa:	490d      	ldr	r1, [pc, #52]	@ (80003e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003ac:	4a0d      	ldr	r2, [pc, #52]	@ (80003e4 <LoopForever+0xe>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b0:	e002      	b.n	80003b8 <LoopCopyDataInit>

080003b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b6:	3304      	adds	r3, #4

080003b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003bc:	d3f9      	bcc.n	80003b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003be:	4a0a      	ldr	r2, [pc, #40]	@ (80003e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c0:	4c0a      	ldr	r4, [pc, #40]	@ (80003ec <LoopForever+0x16>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c4:	e001      	b.n	80003ca <LoopFillZerobss>

080003c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c8:	3204      	adds	r2, #4

080003ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003cc:	d3fb      	bcc.n	80003c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003ce:	f001 fd3b 	bl	8001e48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003d2:	f7ff fef9 	bl	80001c8 <main>

080003d6 <LoopForever>:

LoopForever:
    b LoopForever
 80003d6:	e7fe      	b.n	80003d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003d8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80003dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003e4:	08001ee0 	.word	0x08001ee0
  ldr r2, =_sbss
 80003e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003ec:	2000002c 	.word	0x2000002c

080003f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003f0:	e7fe      	b.n	80003f0 <ADC1_2_IRQHandler>
	...

080003f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003f8:	4b08      	ldr	r3, [pc, #32]	@ (800041c <HAL_Init+0x28>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a07      	ldr	r2, [pc, #28]	@ (800041c <HAL_Init+0x28>)
 80003fe:	f043 0310 	orr.w	r3, r3, #16
 8000402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000404:	2003      	movs	r0, #3
 8000406:	f000 f931 	bl	800066c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800040a:	200f      	movs	r0, #15
 800040c:	f000 f808 	bl	8000420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000410:	f7ff ff60 	bl	80002d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000414:	2300      	movs	r3, #0
}
 8000416:	4618      	mov	r0, r3
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40022000 	.word	0x40022000

08000420 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000428:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <HAL_InitTick+0x54>)
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	4b12      	ldr	r3, [pc, #72]	@ (8000478 <HAL_InitTick+0x58>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	4619      	mov	r1, r3
 8000432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000436:	fbb3 f3f1 	udiv	r3, r3, r1
 800043a:	fbb2 f3f3 	udiv	r3, r2, r3
 800043e:	4618      	mov	r0, r3
 8000440:	f000 f93b 	bl	80006ba <HAL_SYSTICK_Config>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800044a:	2301      	movs	r3, #1
 800044c:	e00e      	b.n	800046c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	2b0f      	cmp	r3, #15
 8000452:	d80a      	bhi.n	800046a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000454:	2200      	movs	r2, #0
 8000456:	6879      	ldr	r1, [r7, #4]
 8000458:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800045c:	f000 f911 	bl	8000682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000460:	4a06      	ldr	r2, [pc, #24]	@ (800047c <HAL_InitTick+0x5c>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000466:	2300      	movs	r3, #0
 8000468:	e000      	b.n	800046c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800046a:	2301      	movs	r3, #1
}
 800046c:	4618      	mov	r0, r3
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000000 	.word	0x20000000
 8000478:	20000008 	.word	0x20000008
 800047c:	20000004 	.word	0x20000004

08000480 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000484:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <HAL_IncTick+0x20>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	461a      	mov	r2, r3
 800048a:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <HAL_IncTick+0x24>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4413      	add	r3, r2
 8000490:	4a04      	ldr	r2, [pc, #16]	@ (80004a4 <HAL_IncTick+0x24>)
 8000492:	6013      	str	r3, [r2, #0]
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	20000008 	.word	0x20000008
 80004a4:	20000028 	.word	0x20000028

080004a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80004ac:	4b03      	ldr	r3, [pc, #12]	@ (80004bc <HAL_GetTick+0x14>)
 80004ae:	681b      	ldr	r3, [r3, #0]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	20000028 	.word	0x20000028

080004c0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004c8:	f7ff ffee 	bl	80004a8 <HAL_GetTick>
 80004cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80004d8:	d005      	beq.n	80004e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004da:	4b0a      	ldr	r3, [pc, #40]	@ (8000504 <HAL_Delay+0x44>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	461a      	mov	r2, r3
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4413      	add	r3, r2
 80004e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80004e6:	bf00      	nop
 80004e8:	f7ff ffde 	bl	80004a8 <HAL_GetTick>
 80004ec:	4602      	mov	r2, r0
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d8f7      	bhi.n	80004e8 <HAL_Delay+0x28>
  {
  }
}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000008 	.word	0x20000008

08000508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f003 0307 	and.w	r3, r3, #7
 8000516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000518:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <__NVIC_SetPriorityGrouping+0x44>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800051e:	68ba      	ldr	r2, [r7, #8]
 8000520:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000524:	4013      	ands	r3, r2
 8000526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000530:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000534:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800053a:	4a04      	ldr	r2, [pc, #16]	@ (800054c <__NVIC_SetPriorityGrouping+0x44>)
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	60d3      	str	r3, [r2, #12]
}
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000554:	4b04      	ldr	r3, [pc, #16]	@ (8000568 <__NVIC_GetPriorityGrouping+0x18>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	0a1b      	lsrs	r3, r3, #8
 800055a:	f003 0307 	and.w	r3, r3, #7
}
 800055e:	4618      	mov	r0, r3
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057c:	2b00      	cmp	r3, #0
 800057e:	db0a      	blt.n	8000596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	b2da      	uxtb	r2, r3
 8000584:	490c      	ldr	r1, [pc, #48]	@ (80005b8 <__NVIC_SetPriority+0x4c>)
 8000586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058a:	0112      	lsls	r2, r2, #4
 800058c:	b2d2      	uxtb	r2, r2
 800058e:	440b      	add	r3, r1
 8000590:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000594:	e00a      	b.n	80005ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4908      	ldr	r1, [pc, #32]	@ (80005bc <__NVIC_SetPriority+0x50>)
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	f003 030f 	and.w	r3, r3, #15
 80005a2:	3b04      	subs	r3, #4
 80005a4:	0112      	lsls	r2, r2, #4
 80005a6:	b2d2      	uxtb	r2, r2
 80005a8:	440b      	add	r3, r1
 80005aa:	761a      	strb	r2, [r3, #24]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	e000e100 	.word	0xe000e100
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b089      	sub	sp, #36	@ 0x24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	f003 0307 	and.w	r3, r3, #7
 80005d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	f1c3 0307 	rsb	r3, r3, #7
 80005da:	2b04      	cmp	r3, #4
 80005dc:	bf28      	it	cs
 80005de:	2304      	movcs	r3, #4
 80005e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	3304      	adds	r3, #4
 80005e6:	2b06      	cmp	r3, #6
 80005e8:	d902      	bls.n	80005f0 <NVIC_EncodePriority+0x30>
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	3b03      	subs	r3, #3
 80005ee:	e000      	b.n	80005f2 <NVIC_EncodePriority+0x32>
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	43da      	mvns	r2, r3
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	401a      	ands	r2, r3
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000608:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	43d9      	mvns	r1, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000618:	4313      	orrs	r3, r2
         );
}
 800061a:	4618      	mov	r0, r3
 800061c:	3724      	adds	r7, #36	@ 0x24
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3b01      	subs	r3, #1
 8000634:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000638:	d301      	bcc.n	800063e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800063a:	2301      	movs	r3, #1
 800063c:	e00f      	b.n	800065e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800063e:	4a0a      	ldr	r2, [pc, #40]	@ (8000668 <SysTick_Config+0x40>)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3b01      	subs	r3, #1
 8000644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000646:	210f      	movs	r1, #15
 8000648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800064c:	f7ff ff8e 	bl	800056c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000650:	4b05      	ldr	r3, [pc, #20]	@ (8000668 <SysTick_Config+0x40>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000656:	4b04      	ldr	r3, [pc, #16]	@ (8000668 <SysTick_Config+0x40>)
 8000658:	2207      	movs	r2, #7
 800065a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	e000e010 	.word	0xe000e010

0800066c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff ff47 	bl	8000508 <__NVIC_SetPriorityGrouping>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b086      	sub	sp, #24
 8000686:	af00      	add	r7, sp, #0
 8000688:	4603      	mov	r3, r0
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607a      	str	r2, [r7, #4]
 800068e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000694:	f7ff ff5c 	bl	8000550 <__NVIC_GetPriorityGrouping>
 8000698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	68b9      	ldr	r1, [r7, #8]
 800069e:	6978      	ldr	r0, [r7, #20]
 80006a0:	f7ff ff8e 	bl	80005c0 <NVIC_EncodePriority>
 80006a4:	4602      	mov	r2, r0
 80006a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006aa:	4611      	mov	r1, r2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff5d 	bl	800056c <__NVIC_SetPriority>
}
 80006b2:	bf00      	nop
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f7ff ffb0 	bl	8000628 <SysTick_Config>
 80006c8:	4603      	mov	r3, r0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b087      	sub	sp, #28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006e2:	e14e      	b.n	8000982 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	2101      	movs	r1, #1
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	fa01 f303 	lsl.w	r3, r1, r3
 80006f0:	4013      	ands	r3, r2
 80006f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	f000 8140 	beq.w	800097c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	f003 0303 	and.w	r3, r3, #3
 8000704:	2b01      	cmp	r3, #1
 8000706:	d005      	beq.n	8000714 <HAL_GPIO_Init+0x40>
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	f003 0303 	and.w	r3, r3, #3
 8000710:	2b02      	cmp	r3, #2
 8000712:	d130      	bne.n	8000776 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	2203      	movs	r2, #3
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	43db      	mvns	r3, r3
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	4013      	ands	r3, r2
 800072a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	68da      	ldr	r2, [r3, #12]
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	693a      	ldr	r2, [r7, #16]
 800073a:	4313      	orrs	r3, r2
 800073c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	693a      	ldr	r2, [r7, #16]
 8000742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800074a:	2201      	movs	r2, #1
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	fa02 f303 	lsl.w	r3, r2, r3
 8000752:	43db      	mvns	r3, r3
 8000754:	693a      	ldr	r2, [r7, #16]
 8000756:	4013      	ands	r3, r2
 8000758:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	091b      	lsrs	r3, r3, #4
 8000760:	f003 0201 	and.w	r2, r3, #1
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	4313      	orrs	r3, r2
 800076e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	f003 0303 	and.w	r3, r3, #3
 800077e:	2b03      	cmp	r3, #3
 8000780:	d017      	beq.n	80007b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	2203      	movs	r2, #3
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	43db      	mvns	r3, r3
 8000794:	693a      	ldr	r2, [r7, #16]
 8000796:	4013      	ands	r3, r2
 8000798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	689a      	ldr	r2, [r3, #8]
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	693a      	ldr	r2, [r7, #16]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	f003 0303 	and.w	r3, r3, #3
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d123      	bne.n	8000806 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	08da      	lsrs	r2, r3, #3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3208      	adds	r2, #8
 80007c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	220f      	movs	r2, #15
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43db      	mvns	r3, r3
 80007dc:	693a      	ldr	r2, [r7, #16]
 80007de:	4013      	ands	r3, r2
 80007e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	691a      	ldr	r2, [r3, #16]
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	f003 0307 	and.w	r3, r3, #7
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	08da      	lsrs	r2, r3, #3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3208      	adds	r2, #8
 8000800:	6939      	ldr	r1, [r7, #16]
 8000802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	2203      	movs	r2, #3
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43db      	mvns	r3, r3
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	4013      	ands	r3, r2
 800081c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	f003 0203 	and.w	r2, r3, #3
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	4313      	orrs	r3, r2
 8000832:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	693a      	ldr	r2, [r7, #16]
 8000838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000842:	2b00      	cmp	r3, #0
 8000844:	f000 809a 	beq.w	800097c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000848:	4b55      	ldr	r3, [pc, #340]	@ (80009a0 <HAL_GPIO_Init+0x2cc>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a54      	ldr	r2, [pc, #336]	@ (80009a0 <HAL_GPIO_Init+0x2cc>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b52      	ldr	r3, [pc, #328]	@ (80009a0 <HAL_GPIO_Init+0x2cc>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000860:	4a50      	ldr	r2, [pc, #320]	@ (80009a4 <HAL_GPIO_Init+0x2d0>)
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	089b      	lsrs	r3, r3, #2
 8000866:	3302      	adds	r3, #2
 8000868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	220f      	movs	r2, #15
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	43db      	mvns	r3, r3
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	4013      	ands	r3, r2
 8000882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800088a:	d013      	beq.n	80008b4 <HAL_GPIO_Init+0x1e0>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a46      	ldr	r2, [pc, #280]	@ (80009a8 <HAL_GPIO_Init+0x2d4>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d00d      	beq.n	80008b0 <HAL_GPIO_Init+0x1dc>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a45      	ldr	r2, [pc, #276]	@ (80009ac <HAL_GPIO_Init+0x2d8>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d007      	beq.n	80008ac <HAL_GPIO_Init+0x1d8>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a44      	ldr	r2, [pc, #272]	@ (80009b0 <HAL_GPIO_Init+0x2dc>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d101      	bne.n	80008a8 <HAL_GPIO_Init+0x1d4>
 80008a4:	2303      	movs	r3, #3
 80008a6:	e006      	b.n	80008b6 <HAL_GPIO_Init+0x1e2>
 80008a8:	2305      	movs	r3, #5
 80008aa:	e004      	b.n	80008b6 <HAL_GPIO_Init+0x1e2>
 80008ac:	2302      	movs	r3, #2
 80008ae:	e002      	b.n	80008b6 <HAL_GPIO_Init+0x1e2>
 80008b0:	2301      	movs	r3, #1
 80008b2:	e000      	b.n	80008b6 <HAL_GPIO_Init+0x1e2>
 80008b4:	2300      	movs	r3, #0
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	f002 0203 	and.w	r2, r2, #3
 80008bc:	0092      	lsls	r2, r2, #2
 80008be:	4093      	lsls	r3, r2
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80008c6:	4937      	ldr	r1, [pc, #220]	@ (80009a4 <HAL_GPIO_Init+0x2d0>)
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	089b      	lsrs	r3, r3, #2
 80008cc:	3302      	adds	r3, #2
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008d4:	4b37      	ldr	r3, [pc, #220]	@ (80009b4 <HAL_GPIO_Init+0x2e0>)
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	43db      	mvns	r3, r3
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4013      	ands	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d003      	beq.n	80008f8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80008f8:	4a2e      	ldr	r2, [pc, #184]	@ (80009b4 <HAL_GPIO_Init+0x2e0>)
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80008fe:	4b2d      	ldr	r3, [pc, #180]	@ (80009b4 <HAL_GPIO_Init+0x2e0>)
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	43db      	mvns	r3, r3
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	4013      	ands	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000916:	2b00      	cmp	r3, #0
 8000918:	d003      	beq.n	8000922 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4313      	orrs	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000922:	4a24      	ldr	r2, [pc, #144]	@ (80009b4 <HAL_GPIO_Init+0x2e0>)
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000928:	4b22      	ldr	r3, [pc, #136]	@ (80009b4 <HAL_GPIO_Init+0x2e0>)
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	43db      	mvns	r3, r3
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	4013      	ands	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000940:	2b00      	cmp	r3, #0
 8000942:	d003      	beq.n	800094c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	4313      	orrs	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800094c:	4a19      	ldr	r2, [pc, #100]	@ (80009b4 <HAL_GPIO_Init+0x2e0>)
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000952:	4b18      	ldr	r3, [pc, #96]	@ (80009b4 <HAL_GPIO_Init+0x2e0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	43db      	mvns	r3, r3
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	4013      	ands	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4313      	orrs	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000976:	4a0f      	ldr	r2, [pc, #60]	@ (80009b4 <HAL_GPIO_Init+0x2e0>)
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	fa22 f303 	lsr.w	r3, r2, r3
 800098c:	2b00      	cmp	r3, #0
 800098e:	f47f aea9 	bne.w	80006e4 <HAL_GPIO_Init+0x10>
  }
}
 8000992:	bf00      	nop
 8000994:	bf00      	nop
 8000996:	371c      	adds	r7, #28
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40010000 	.word	0x40010000
 80009a8:	48000400 	.word	0x48000400
 80009ac:	48000800 	.word	0x48000800
 80009b0:	48000c00 	.word	0x48000c00
 80009b4:	40010400 	.word	0x40010400

080009b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	807b      	strh	r3, [r7, #2]
 80009c4:	4613      	mov	r3, r2
 80009c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009c8:	787b      	ldrb	r3, [r7, #1]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d003      	beq.n	80009d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009ce:	887a      	ldrh	r2, [r7, #2]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80009d4:	e002      	b.n	80009dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009d6:	887a      	ldrh	r2, [r7, #2]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80009fa:	887a      	ldrh	r2, [r7, #2]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4013      	ands	r3, r2
 8000a00:	041a      	lsls	r2, r3, #16
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	43d9      	mvns	r1, r3
 8000a06:	887b      	ldrh	r3, [r7, #2]
 8000a08:	400b      	ands	r3, r1
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	619a      	str	r2, [r3, #24]
}
 8000a10:	bf00      	nop
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000a28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000a2c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000a32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f001 b823 	b.w	8001a88 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000a46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f000 817d 	beq.w	8000d52 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a58:	4bbc      	ldr	r3, [pc, #752]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f003 030c 	and.w	r3, r3, #12
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d00c      	beq.n	8000a7e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a64:	4bb9      	ldr	r3, [pc, #740]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f003 030c 	and.w	r3, r3, #12
 8000a6c:	2b08      	cmp	r3, #8
 8000a6e:	d15c      	bne.n	8000b2a <HAL_RCC_OscConfig+0x10e>
 8000a70:	4bb6      	ldr	r3, [pc, #728]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a7c:	d155      	bne.n	8000b2a <HAL_RCC_OscConfig+0x10e>
 8000a7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000a82:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a86:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000a8a:	fa93 f3a3 	rbit	r3, r3
 8000a8e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a92:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a96:	fab3 f383 	clz	r3, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	095b      	lsrs	r3, r3, #5
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d102      	bne.n	8000ab0 <HAL_RCC_OscConfig+0x94>
 8000aaa:	4ba8      	ldr	r3, [pc, #672]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	e015      	b.n	8000adc <HAL_RCC_OscConfig+0xc0>
 8000ab0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ab4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000abc:	fa93 f3a3 	rbit	r3, r3
 8000ac0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000ac4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ac8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000acc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000ad0:	fa93 f3a3 	rbit	r3, r3
 8000ad4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000ad8:	4b9c      	ldr	r3, [pc, #624]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000adc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ae0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000ae4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000ae8:	fa92 f2a2 	rbit	r2, r2
 8000aec:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000af0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000af4:	fab2 f282 	clz	r2, r2
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	f042 0220 	orr.w	r2, r2, #32
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	f002 021f 	and.w	r2, r2, #31
 8000b04:	2101      	movs	r1, #1
 8000b06:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	f000 811f 	beq.w	8000d50 <HAL_RCC_OscConfig+0x334>
 8000b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f040 8116 	bne.w	8000d50 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	f000 bfaf 	b.w	8001a88 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b3a:	d106      	bne.n	8000b4a <HAL_RCC_OscConfig+0x12e>
 8000b3c:	4b83      	ldr	r3, [pc, #524]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a82      	ldr	r2, [pc, #520]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000b42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	e036      	b.n	8000bb8 <HAL_RCC_OscConfig+0x19c>
 8000b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10c      	bne.n	8000b74 <HAL_RCC_OscConfig+0x158>
 8000b5a:	4b7c      	ldr	r3, [pc, #496]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a7b      	ldr	r2, [pc, #492]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000b60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	4b79      	ldr	r3, [pc, #484]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a78      	ldr	r2, [pc, #480]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000b6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b70:	6013      	str	r3, [r2, #0]
 8000b72:	e021      	b.n	8000bb8 <HAL_RCC_OscConfig+0x19c>
 8000b74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000b84:	d10c      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x184>
 8000b86:	4b71      	ldr	r3, [pc, #452]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a70      	ldr	r2, [pc, #448]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	4b6e      	ldr	r3, [pc, #440]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a6d      	ldr	r2, [pc, #436]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b9c:	6013      	str	r3, [r2, #0]
 8000b9e:	e00b      	b.n	8000bb8 <HAL_RCC_OscConfig+0x19c>
 8000ba0:	4b6a      	ldr	r3, [pc, #424]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a69      	ldr	r2, [pc, #420]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	4b67      	ldr	r3, [pc, #412]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a66      	ldr	r2, [pc, #408]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000bb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bb6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bb8:	4b64      	ldr	r3, [pc, #400]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bbc:	f023 020f 	bic.w	r2, r3, #15
 8000bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000bc4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	495f      	ldr	r1, [pc, #380]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000bd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d059      	beq.n	8000c96 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be2:	f7ff fc61 	bl	80004a8 <HAL_GetTick>
 8000be6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bea:	e00a      	b.n	8000c02 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bec:	f7ff fc5c 	bl	80004a8 <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b64      	cmp	r3, #100	@ 0x64
 8000bfa:	d902      	bls.n	8000c02 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	f000 bf43 	b.w	8001a88 <HAL_RCC_OscConfig+0x106c>
 8000c02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c06:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c0a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000c0e:	fa93 f3a3 	rbit	r3, r3
 8000c12:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000c16:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c1a:	fab3 f383 	clz	r3, r3
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	095b      	lsrs	r3, r3, #5
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d102      	bne.n	8000c34 <HAL_RCC_OscConfig+0x218>
 8000c2e:	4b47      	ldr	r3, [pc, #284]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	e015      	b.n	8000c60 <HAL_RCC_OscConfig+0x244>
 8000c34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c38:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c3c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000c40:	fa93 f3a3 	rbit	r3, r3
 8000c44:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000c48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c4c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000c50:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000c54:	fa93 f3a3 	rbit	r3, r3
 8000c58:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c60:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c64:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000c68:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000c6c:	fa92 f2a2 	rbit	r2, r2
 8000c70:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000c74:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000c78:	fab2 f282 	clz	r2, r2
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	f042 0220 	orr.w	r2, r2, #32
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	f002 021f 	and.w	r2, r2, #31
 8000c88:	2101      	movs	r1, #1
 8000c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8e:	4013      	ands	r3, r2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d0ab      	beq.n	8000bec <HAL_RCC_OscConfig+0x1d0>
 8000c94:	e05d      	b.n	8000d52 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c96:	f7ff fc07 	bl	80004a8 <HAL_GetTick>
 8000c9a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9e:	e00a      	b.n	8000cb6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ca0:	f7ff fc02 	bl	80004a8 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	2b64      	cmp	r3, #100	@ 0x64
 8000cae:	d902      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	f000 bee9 	b.w	8001a88 <HAL_RCC_OscConfig+0x106c>
 8000cb6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cba:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000cc2:	fa93 f3a3 	rbit	r3, r3
 8000cc6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000cca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cce:	fab3 f383 	clz	r3, r3
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	095b      	lsrs	r3, r3, #5
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d102      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x2cc>
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	e015      	b.n	8000d14 <HAL_RCC_OscConfig+0x2f8>
 8000ce8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cec:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000cf4:	fa93 f3a3 	rbit	r3, r3
 8000cf8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000cfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d00:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000d04:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000d08:	fa93 f3a3 	rbit	r3, r3
 8000d0c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d14:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d18:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8000d1c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000d20:	fa92 f2a2 	rbit	r2, r2
 8000d24:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8000d28:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	f042 0220 	orr.w	r2, r2, #32
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	f002 021f 	and.w	r2, r2, #31
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d42:	4013      	ands	r3, r2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1ab      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x284>
 8000d48:	e003      	b.n	8000d52 <HAL_RCC_OscConfig+0x336>
 8000d4a:	bf00      	nop
 8000d4c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 817d 	beq.w	8001062 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d68:	4ba6      	ldr	r3, [pc, #664]	@ (8001004 <HAL_RCC_OscConfig+0x5e8>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 030c 	and.w	r3, r3, #12
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d00b      	beq.n	8000d8c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d74:	4ba3      	ldr	r3, [pc, #652]	@ (8001004 <HAL_RCC_OscConfig+0x5e8>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 030c 	and.w	r3, r3, #12
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	d172      	bne.n	8000e66 <HAL_RCC_OscConfig+0x44a>
 8000d80:	4ba0      	ldr	r3, [pc, #640]	@ (8001004 <HAL_RCC_OscConfig+0x5e8>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d16c      	bne.n	8000e66 <HAL_RCC_OscConfig+0x44a>
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d92:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000d96:	fa93 f3a3 	rbit	r3, r3
 8000d9a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8000d9e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da2:	fab3 f383 	clz	r3, r3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	095b      	lsrs	r3, r3, #5
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d102      	bne.n	8000dbc <HAL_RCC_OscConfig+0x3a0>
 8000db6:	4b93      	ldr	r3, [pc, #588]	@ (8001004 <HAL_RCC_OscConfig+0x5e8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	e013      	b.n	8000de4 <HAL_RCC_OscConfig+0x3c8>
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8000dc6:	fa93 f3a3 	rbit	r3, r3
 8000dca:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000dce:	2302      	movs	r3, #2
 8000dd0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000dd4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000dd8:	fa93 f3a3 	rbit	r3, r3
 8000ddc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8000de0:	4b88      	ldr	r3, [pc, #544]	@ (8001004 <HAL_RCC_OscConfig+0x5e8>)
 8000de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de4:	2202      	movs	r2, #2
 8000de6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8000dea:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000dee:	fa92 f2a2 	rbit	r2, r2
 8000df2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8000df6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	f042 0220 	orr.w	r2, r2, #32
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	f002 021f 	and.w	r2, r2, #31
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00a      	beq.n	8000e2c <HAL_RCC_OscConfig+0x410>
 8000e16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d002      	beq.n	8000e2c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	f000 be2e 	b.w	8001a88 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2c:	4b75      	ldr	r3, [pc, #468]	@ (8001004 <HAL_RCC_OscConfig+0x5e8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	21f8      	movs	r1, #248	@ 0xf8
 8000e42:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e46:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000e4a:	fa91 f1a1 	rbit	r1, r1
 8000e4e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8000e52:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8000e56:	fab1 f181 	clz	r1, r1
 8000e5a:	b2c9      	uxtb	r1, r1
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	4969      	ldr	r1, [pc, #420]	@ (8001004 <HAL_RCC_OscConfig+0x5e8>)
 8000e60:	4313      	orrs	r3, r2
 8000e62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e64:	e0fd      	b.n	8001062 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 8088 	beq.w	8000f88 <HAL_RCC_OscConfig+0x56c>
 8000e78:	2301      	movs	r3, #1
 8000e7a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8000e82:	fa93 f3a3 	rbit	r3, r3
 8000e86:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8000e8a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e8e:	fab3 f383 	clz	r3, r3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000e98:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fb00 	bl	80004a8 <HAL_GetTick>
 8000ea8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eac:	e00a      	b.n	8000ec4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eae:	f7ff fafb 	bl	80004a8 <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d902      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	f000 bde2 	b.w	8001a88 <HAL_RCC_OscConfig+0x106c>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eca:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000ece:	fa93 f3a3 	rbit	r3, r3
 8000ed2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8000ed6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eda:	fab3 f383 	clz	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	095b      	lsrs	r3, r3, #5
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d102      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x4d8>
 8000eee:	4b45      	ldr	r3, [pc, #276]	@ (8001004 <HAL_RCC_OscConfig+0x5e8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	e013      	b.n	8000f1c <HAL_RCC_OscConfig+0x500>
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000efe:	fa93 f3a3 	rbit	r3, r3
 8000f02:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000f06:	2302      	movs	r3, #2
 8000f08:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000f0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000f10:	fa93 f3a3 	rbit	r3, r3
 8000f14:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8000f18:	4b3a      	ldr	r3, [pc, #232]	@ (8001004 <HAL_RCC_OscConfig+0x5e8>)
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8000f22:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8000f26:	fa92 f2a2 	rbit	r2, r2
 8000f2a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8000f2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8000f32:	fab2 f282 	clz	r2, r2
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	f042 0220 	orr.w	r2, r2, #32
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	f002 021f 	and.w	r2, r2, #31
 8000f42:	2101      	movs	r1, #1
 8000f44:	fa01 f202 	lsl.w	r2, r1, r2
 8000f48:	4013      	ands	r3, r2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0af      	beq.n	8000eae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001004 <HAL_RCC_OscConfig+0x5e8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	21f8      	movs	r1, #248	@ 0xf8
 8000f64:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f68:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8000f6c:	fa91 f1a1 	rbit	r1, r1
 8000f70:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8000f74:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8000f78:	fab1 f181 	clz	r1, r1
 8000f7c:	b2c9      	uxtb	r1, r1
 8000f7e:	408b      	lsls	r3, r1
 8000f80:	4920      	ldr	r1, [pc, #128]	@ (8001004 <HAL_RCC_OscConfig+0x5e8>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	600b      	str	r3, [r1, #0]
 8000f86:	e06c      	b.n	8001062 <HAL_RCC_OscConfig+0x646>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000f92:	fa93 f3a3 	rbit	r3, r3
 8000f96:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8000f9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f9e:	fab3 f383 	clz	r3, r3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000fa8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fa78 	bl	80004a8 <HAL_GetTick>
 8000fb8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fbc:	e00a      	b.n	8000fd4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fbe:	f7ff fa73 	bl	80004a8 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d902      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	f000 bd5a 	b.w	8001a88 <HAL_RCC_OscConfig+0x106c>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fda:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000fde:	fa93 f3a3 	rbit	r3, r3
 8000fe2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8000fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fea:	fab3 f383 	clz	r3, r3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	095b      	lsrs	r3, r3, #5
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d104      	bne.n	8001008 <HAL_RCC_OscConfig+0x5ec>
 8000ffe:	4b01      	ldr	r3, [pc, #4]	@ (8001004 <HAL_RCC_OscConfig+0x5e8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	e015      	b.n	8001030 <HAL_RCC_OscConfig+0x614>
 8001004:	40021000 	.word	0x40021000
 8001008:	2302      	movs	r3, #2
 800100a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001012:	fa93 f3a3 	rbit	r3, r3
 8001016:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800101a:	2302      	movs	r3, #2
 800101c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001020:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001024:	fa93 f3a3 	rbit	r3, r3
 8001028:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800102c:	4bc8      	ldr	r3, [pc, #800]	@ (8001350 <HAL_RCC_OscConfig+0x934>)
 800102e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001030:	2202      	movs	r2, #2
 8001032:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001036:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800103a:	fa92 f2a2 	rbit	r2, r2
 800103e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001042:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001046:	fab2 f282 	clz	r2, r2
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	f042 0220 	orr.w	r2, r2, #32
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	f002 021f 	and.w	r2, r2, #31
 8001056:	2101      	movs	r1, #1
 8001058:	fa01 f202 	lsl.w	r2, r1, r2
 800105c:	4013      	ands	r3, r2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1ad      	bne.n	8000fbe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001066:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8110 	beq.w	8001298 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800107c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d079      	beq.n	800117c <HAL_RCC_OscConfig+0x760>
 8001088:	2301      	movs	r3, #1
 800108a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001092:	fa93 f3a3 	rbit	r3, r3
 8001096:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800109a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800109e:	fab3 f383 	clz	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	4bab      	ldr	r3, [pc, #684]	@ (8001354 <HAL_RCC_OscConfig+0x938>)
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	461a      	mov	r2, r3
 80010ae:	2301      	movs	r3, #1
 80010b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b2:	f7ff f9f9 	bl	80004a8 <HAL_GetTick>
 80010b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ba:	e00a      	b.n	80010d2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010bc:	f7ff f9f4 	bl	80004a8 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d902      	bls.n	80010d2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	f000 bcdb 	b.w	8001a88 <HAL_RCC_OscConfig+0x106c>
 80010d2:	2302      	movs	r3, #2
 80010d4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80010dc:	fa93 f3a3 	rbit	r3, r3
 80010e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80010e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80010ec:	2202      	movs	r2, #2
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	fa93 f2a3 	rbit	r2, r3
 80010fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001102:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800110c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001110:	2202      	movs	r2, #2
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	fa93 f2a3 	rbit	r2, r3
 8001122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001126:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800112a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112c:	4b88      	ldr	r3, [pc, #544]	@ (8001350 <HAL_RCC_OscConfig+0x934>)
 800112e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001134:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001138:	2102      	movs	r1, #2
 800113a:	6019      	str	r1, [r3, #0]
 800113c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001140:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	fa93 f1a3 	rbit	r1, r3
 800114a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800114e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001152:	6019      	str	r1, [r3, #0]
  return result;
 8001154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001158:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	fab3 f383 	clz	r3, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f003 031f 	and.w	r3, r3, #31
 800116e:	2101      	movs	r1, #1
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	4013      	ands	r3, r2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0a0      	beq.n	80010bc <HAL_RCC_OscConfig+0x6a0>
 800117a:	e08d      	b.n	8001298 <HAL_RCC_OscConfig+0x87c>
 800117c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001180:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800118c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	fa93 f2a3 	rbit	r2, r3
 8001196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800119a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800119e:	601a      	str	r2, [r3, #0]
  return result;
 80011a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011a4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80011a8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011aa:	fab3 f383 	clz	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b68      	ldr	r3, [pc, #416]	@ (8001354 <HAL_RCC_OscConfig+0x938>)
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	461a      	mov	r2, r3
 80011ba:	2300      	movs	r3, #0
 80011bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011be:	f7ff f973 	bl	80004a8 <HAL_GetTick>
 80011c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c6:	e00a      	b.n	80011de <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c8:	f7ff f96e 	bl	80004a8 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d902      	bls.n	80011de <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	f000 bc55 	b.w	8001a88 <HAL_RCC_OscConfig+0x106c>
 80011de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80011e6:	2202      	movs	r2, #2
 80011e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	fa93 f2a3 	rbit	r2, r3
 80011f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011fc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001206:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800120a:	2202      	movs	r2, #2
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001212:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	fa93 f2a3 	rbit	r2, r3
 800121c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001220:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800122a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800122e:	2202      	movs	r2, #2
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001236:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	fa93 f2a3 	rbit	r2, r3
 8001240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001244:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001248:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800124a:	4b41      	ldr	r3, [pc, #260]	@ (8001350 <HAL_RCC_OscConfig+0x934>)
 800124c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800124e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001252:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001256:	2102      	movs	r1, #2
 8001258:	6019      	str	r1, [r3, #0]
 800125a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800125e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	fa93 f1a3 	rbit	r1, r3
 8001268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800126c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001270:	6019      	str	r1, [r3, #0]
  return result;
 8001272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001276:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	fab3 f383 	clz	r3, r3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	2101      	movs	r1, #1
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	4013      	ands	r3, r2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d197      	bne.n	80011c8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800129c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 81a1 	beq.w	80015f0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b4:	4b26      	ldr	r3, [pc, #152]	@ (8001350 <HAL_RCC_OscConfig+0x934>)
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d116      	bne.n	80012ee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c0:	4b23      	ldr	r3, [pc, #140]	@ (8001350 <HAL_RCC_OscConfig+0x934>)
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	4a22      	ldr	r2, [pc, #136]	@ (8001350 <HAL_RCC_OscConfig+0x934>)
 80012c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ca:	61d3      	str	r3, [r2, #28]
 80012cc:	4b20      	ldr	r3, [pc, #128]	@ (8001350 <HAL_RCC_OscConfig+0x934>)
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80012d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012d8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012e2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80012e6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001358 <HAL_RCC_OscConfig+0x93c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d11a      	bne.n	8001330 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012fa:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <HAL_RCC_OscConfig+0x93c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a16      	ldr	r2, [pc, #88]	@ (8001358 <HAL_RCC_OscConfig+0x93c>)
 8001300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001304:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001306:	f7ff f8cf 	bl	80004a8 <HAL_GetTick>
 800130a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130e:	e009      	b.n	8001324 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001310:	f7ff f8ca 	bl	80004a8 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b64      	cmp	r3, #100	@ 0x64
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e3b1      	b.n	8001a88 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <HAL_RCC_OscConfig+0x93c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0ef      	beq.n	8001310 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001334:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d10d      	bne.n	800135c <HAL_RCC_OscConfig+0x940>
 8001340:	4b03      	ldr	r3, [pc, #12]	@ (8001350 <HAL_RCC_OscConfig+0x934>)
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4a02      	ldr	r2, [pc, #8]	@ (8001350 <HAL_RCC_OscConfig+0x934>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6213      	str	r3, [r2, #32]
 800134c:	e03c      	b.n	80013c8 <HAL_RCC_OscConfig+0x9ac>
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000
 8001354:	10908120 	.word	0x10908120
 8001358:	40007000 	.word	0x40007000
 800135c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001360:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d10c      	bne.n	8001386 <HAL_RCC_OscConfig+0x96a>
 800136c:	4bc1      	ldr	r3, [pc, #772]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	4ac0      	ldr	r2, [pc, #768]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 8001372:	f023 0301 	bic.w	r3, r3, #1
 8001376:	6213      	str	r3, [r2, #32]
 8001378:	4bbe      	ldr	r3, [pc, #760]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4abd      	ldr	r2, [pc, #756]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 800137e:	f023 0304 	bic.w	r3, r3, #4
 8001382:	6213      	str	r3, [r2, #32]
 8001384:	e020      	b.n	80013c8 <HAL_RCC_OscConfig+0x9ac>
 8001386:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800138a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2b05      	cmp	r3, #5
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x994>
 8001396:	4bb7      	ldr	r3, [pc, #732]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	4ab6      	ldr	r2, [pc, #728]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6213      	str	r3, [r2, #32]
 80013a2:	4bb4      	ldr	r3, [pc, #720]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4ab3      	ldr	r2, [pc, #716]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6213      	str	r3, [r2, #32]
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0x9ac>
 80013b0:	4bb0      	ldr	r3, [pc, #704]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	4aaf      	ldr	r2, [pc, #700]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 80013b6:	f023 0301 	bic.w	r3, r3, #1
 80013ba:	6213      	str	r3, [r2, #32]
 80013bc:	4bad      	ldr	r3, [pc, #692]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	4aac      	ldr	r2, [pc, #688]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 80013c2:	f023 0304 	bic.w	r3, r3, #4
 80013c6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 8081 	beq.w	80014dc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013da:	f7ff f865 	bl	80004a8 <HAL_GetTick>
 80013de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e2:	e00b      	b.n	80013fc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e4:	f7ff f860 	bl	80004a8 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e345      	b.n	8001a88 <HAL_RCC_OscConfig+0x106c>
 80013fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001400:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001404:	2202      	movs	r2, #2
 8001406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800140c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	fa93 f2a3 	rbit	r2, r3
 8001416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800141a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001424:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001428:	2202      	movs	r2, #2
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001430:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	fa93 f2a3 	rbit	r2, r3
 800143a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800143e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001442:	601a      	str	r2, [r3, #0]
  return result;
 8001444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001448:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800144c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144e:	fab3 f383 	clz	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	095b      	lsrs	r3, r3, #5
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d102      	bne.n	8001468 <HAL_RCC_OscConfig+0xa4c>
 8001462:	4b84      	ldr	r3, [pc, #528]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	e013      	b.n	8001490 <HAL_RCC_OscConfig+0xa74>
 8001468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800146c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001470:	2202      	movs	r2, #2
 8001472:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001478:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	fa93 f2a3 	rbit	r2, r3
 8001482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001486:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	4b79      	ldr	r3, [pc, #484]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 800148e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001490:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001494:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001498:	2102      	movs	r1, #2
 800149a:	6011      	str	r1, [r2, #0]
 800149c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80014a0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	fa92 f1a2 	rbit	r1, r2
 80014aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80014ae:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80014b2:	6011      	str	r1, [r2, #0]
  return result;
 80014b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80014b8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	fab2 f282 	clz	r2, r2
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	f002 021f 	and.w	r2, r2, #31
 80014ce:	2101      	movs	r1, #1
 80014d0:	fa01 f202 	lsl.w	r2, r1, r2
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d084      	beq.n	80013e4 <HAL_RCC_OscConfig+0x9c8>
 80014da:	e07f      	b.n	80015dc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014dc:	f7fe ffe4 	bl	80004a8 <HAL_GetTick>
 80014e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e4:	e00b      	b.n	80014fe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e6:	f7fe ffdf 	bl	80004a8 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e2c4      	b.n	8001a88 <HAL_RCC_OscConfig+0x106c>
 80014fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001502:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001506:	2202      	movs	r2, #2
 8001508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800150e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	fa93 f2a3 	rbit	r2, r3
 8001518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800151c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001526:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800152a:	2202      	movs	r2, #2
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001532:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	fa93 f2a3 	rbit	r2, r3
 800153c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001540:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001544:	601a      	str	r2, [r3, #0]
  return result;
 8001546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800154a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800154e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001550:	fab3 f383 	clz	r3, r3
 8001554:	b2db      	uxtb	r3, r3
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f043 0302 	orr.w	r3, r3, #2
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d102      	bne.n	800156a <HAL_RCC_OscConfig+0xb4e>
 8001564:	4b43      	ldr	r3, [pc, #268]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	e013      	b.n	8001592 <HAL_RCC_OscConfig+0xb76>
 800156a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800156e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001572:	2202      	movs	r2, #2
 8001574:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800157a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	fa93 f2a3 	rbit	r2, r3
 8001584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001588:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	4b39      	ldr	r3, [pc, #228]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 8001590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001592:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001596:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800159a:	2102      	movs	r1, #2
 800159c:	6011      	str	r1, [r2, #0]
 800159e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80015a2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	fa92 f1a2 	rbit	r1, r2
 80015ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80015b0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80015b4:	6011      	str	r1, [r2, #0]
  return result;
 80015b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80015ba:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	fab2 f282 	clz	r2, r2
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	f002 021f 	and.w	r2, r2, #31
 80015d0:	2101      	movs	r1, #1
 80015d2:	fa01 f202 	lsl.w	r2, r1, r2
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d184      	bne.n	80014e6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d105      	bne.n	80015f0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e4:	4b23      	ldr	r3, [pc, #140]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	4a22      	ldr	r2, [pc, #136]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 80015ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8242 	beq.w	8001a86 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001602:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <HAL_RCC_OscConfig+0xc58>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 030c 	and.w	r3, r3, #12
 800160a:	2b08      	cmp	r3, #8
 800160c:	f000 8213 	beq.w	8001a36 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001614:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	2b02      	cmp	r3, #2
 800161e:	f040 8162 	bne.w	80018e6 <HAL_RCC_OscConfig+0xeca>
 8001622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001626:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800162a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800162e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001634:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	fa93 f2a3 	rbit	r2, r3
 800163e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001642:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001646:	601a      	str	r2, [r3, #0]
  return result;
 8001648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800164c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001650:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	b2db      	uxtb	r3, r3
 8001658:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800165c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	461a      	mov	r2, r3
 8001664:	2300      	movs	r3, #0
 8001666:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7fe ff1e 	bl	80004a8 <HAL_GetTick>
 800166c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001670:	e00c      	b.n	800168c <HAL_RCC_OscConfig+0xc70>
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001678:	f7fe ff16 	bl	80004a8 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e1fd      	b.n	8001a88 <HAL_RCC_OscConfig+0x106c>
 800168c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001690:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001694:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001698:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800169e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	fa93 f2a3 	rbit	r2, r3
 80016a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ac:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80016b0:	601a      	str	r2, [r3, #0]
  return result;
 80016b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80016ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016bc:	fab3 f383 	clz	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d102      	bne.n	80016d6 <HAL_RCC_OscConfig+0xcba>
 80016d0:	4bb0      	ldr	r3, [pc, #704]	@ (8001994 <HAL_RCC_OscConfig+0xf78>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	e027      	b.n	8001726 <HAL_RCC_OscConfig+0xd0a>
 80016d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016da:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80016de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	fa93 f2a3 	rbit	r2, r3
 80016f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001700:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001704:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800170e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	fa93 f2a3 	rbit	r2, r3
 8001718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800171c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	4b9c      	ldr	r3, [pc, #624]	@ (8001994 <HAL_RCC_OscConfig+0xf78>)
 8001724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001726:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800172a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800172e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001732:	6011      	str	r1, [r2, #0]
 8001734:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001738:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	fa92 f1a2 	rbit	r1, r2
 8001742:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001746:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800174a:	6011      	str	r1, [r2, #0]
  return result;
 800174c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001750:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	fab2 f282 	clz	r2, r2
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	f042 0220 	orr.w	r2, r2, #32
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	f002 021f 	and.w	r2, r2, #31
 8001766:	2101      	movs	r1, #1
 8001768:	fa01 f202 	lsl.w	r2, r1, r2
 800176c:	4013      	ands	r3, r2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d182      	bne.n	8001678 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001772:	4b88      	ldr	r3, [pc, #544]	@ (8001994 <HAL_RCC_OscConfig+0xf78>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800177a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800177e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800178a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	430b      	orrs	r3, r1
 8001794:	497f      	ldr	r1, [pc, #508]	@ (8001994 <HAL_RCC_OscConfig+0xf78>)
 8001796:	4313      	orrs	r3, r2
 8001798:	604b      	str	r3, [r1, #4]
 800179a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80017a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ac:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	fa93 f2a3 	rbit	r2, r3
 80017b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ba:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80017be:	601a      	str	r2, [r3, #0]
  return result;
 80017c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80017c8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80017d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	461a      	mov	r2, r3
 80017dc:	2301      	movs	r3, #1
 80017de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7fe fe62 	bl	80004a8 <HAL_GetTick>
 80017e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e8:	e009      	b.n	80017fe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ea:	f7fe fe5d 	bl	80004a8 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e144      	b.n	8001a88 <HAL_RCC_OscConfig+0x106c>
 80017fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001802:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001806:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800180a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001810:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	fa93 f2a3 	rbit	r2, r3
 800181a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800181e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001822:	601a      	str	r2, [r3, #0]
  return result;
 8001824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001828:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800182c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800182e:	fab3 f383 	clz	r3, r3
 8001832:	b2db      	uxtb	r3, r3
 8001834:	095b      	lsrs	r3, r3, #5
 8001836:	b2db      	uxtb	r3, r3
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d102      	bne.n	8001848 <HAL_RCC_OscConfig+0xe2c>
 8001842:	4b54      	ldr	r3, [pc, #336]	@ (8001994 <HAL_RCC_OscConfig+0xf78>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	e027      	b.n	8001898 <HAL_RCC_OscConfig+0xe7c>
 8001848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800184c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001850:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800185a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001868:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001872:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001876:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001880:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	fa93 f2a3 	rbit	r2, r3
 800188a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800188e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	4b3f      	ldr	r3, [pc, #252]	@ (8001994 <HAL_RCC_OscConfig+0xf78>)
 8001896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001898:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800189c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80018a0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80018a4:	6011      	str	r1, [r2, #0]
 80018a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018aa:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	fa92 f1a2 	rbit	r1, r2
 80018b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018b8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80018bc:	6011      	str	r1, [r2, #0]
  return result;
 80018be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018c2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	fab2 f282 	clz	r2, r2
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	f042 0220 	orr.w	r2, r2, #32
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	f002 021f 	and.w	r2, r2, #31
 80018d8:	2101      	movs	r1, #1
 80018da:	fa01 f202 	lsl.w	r2, r1, r2
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d082      	beq.n	80017ea <HAL_RCC_OscConfig+0xdce>
 80018e4:	e0cf      	b.n	8001a86 <HAL_RCC_OscConfig+0x106a>
 80018e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ea:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80018ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	fa93 f2a3 	rbit	r2, r3
 8001902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001906:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800190a:	601a      	str	r2, [r3, #0]
  return result;
 800190c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001910:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001914:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001920:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	461a      	mov	r2, r3
 8001928:	2300      	movs	r3, #0
 800192a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7fe fdbc 	bl	80004a8 <HAL_GetTick>
 8001930:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001934:	e009      	b.n	800194a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001936:	f7fe fdb7 	bl	80004a8 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e09e      	b.n	8001a88 <HAL_RCC_OscConfig+0x106c>
 800194a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800194e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001952:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	fa93 f2a3 	rbit	r2, r3
 8001966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800196e:	601a      	str	r2, [r3, #0]
  return result;
 8001970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001974:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001978:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	095b      	lsrs	r3, r3, #5
 8001982:	b2db      	uxtb	r3, r3
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b01      	cmp	r3, #1
 800198c:	d104      	bne.n	8001998 <HAL_RCC_OscConfig+0xf7c>
 800198e:	4b01      	ldr	r3, [pc, #4]	@ (8001994 <HAL_RCC_OscConfig+0xf78>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	e029      	b.n	80019e8 <HAL_RCC_OscConfig+0xfcc>
 8001994:	40021000 	.word	0x40021000
 8001998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800199c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80019a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019aa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	fa93 f2a3 	rbit	r2, r3
 80019b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80019c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	fa93 f2a3 	rbit	r2, r3
 80019da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019de:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a94 <HAL_RCC_OscConfig+0x1078>)
 80019e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019ec:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80019f0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80019f4:	6011      	str	r1, [r2, #0]
 80019f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019fa:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	fa92 f1a2 	rbit	r1, r2
 8001a04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a08:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001a0c:	6011      	str	r1, [r2, #0]
  return result;
 8001a0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a12:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	fab2 f282 	clz	r2, r2
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	f042 0220 	orr.w	r2, r2, #32
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	f002 021f 	and.w	r2, r2, #31
 8001a28:	2101      	movs	r1, #1
 8001a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d180      	bne.n	8001936 <HAL_RCC_OscConfig+0xf1a>
 8001a34:	e027      	b.n	8001a86 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e01e      	b.n	8001a88 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a4a:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <HAL_RCC_OscConfig+0x1078>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001a56:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d10b      	bne.n	8001a82 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001a6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001a6e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d001      	beq.n	8001a86 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000

08001a98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b09e      	sub	sp, #120	@ 0x78
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e162      	b.n	8001d76 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b90      	ldr	r3, [pc, #576]	@ (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d910      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b8d      	ldr	r3, [pc, #564]	@ (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 0207 	bic.w	r2, r3, #7
 8001ac6:	498b      	ldr	r1, [pc, #556]	@ (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b89      	ldr	r3, [pc, #548]	@ (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e14a      	b.n	8001d76 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aec:	4b82      	ldr	r3, [pc, #520]	@ (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	497f      	ldr	r1, [pc, #508]	@ (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 80dc 	beq.w	8001cc4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d13c      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xf6>
 8001b14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b18:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001b22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b24:	fab3 f383 	clz	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d102      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xa6>
 8001b38:	4b6f      	ldr	r3, [pc, #444]	@ (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	e00f      	b.n	8001b5e <HAL_RCC_ClockConfig+0xc6>
 8001b3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b42:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b50:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b54:	fa93 f3a3 	rbit	r3, r3
 8001b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b5a:	4b67      	ldr	r3, [pc, #412]	@ (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b62:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001b64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001b66:	fa92 f2a2 	rbit	r2, r2
 8001b6a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001b6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001b6e:	fab2 f282 	clz	r2, r2
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	f042 0220 	orr.w	r2, r2, #32
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	f002 021f 	and.w	r2, r2, #31
 8001b7e:	2101      	movs	r1, #1
 8001b80:	fa01 f202 	lsl.w	r2, r1, r2
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d17b      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0f3      	b.n	8001d76 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d13c      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x178>
 8001b96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b9a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001ba4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba6:	fab3 f383 	clz	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	095b      	lsrs	r3, r3, #5
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d102      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x128>
 8001bba:	4b4f      	ldr	r3, [pc, #316]	@ (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	e00f      	b.n	8001be0 <HAL_RCC_ClockConfig+0x148>
 8001bc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bdc:	4b46      	ldr	r3, [pc, #280]	@ (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001be4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001be6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001be8:	fa92 f2a2 	rbit	r2, r2
 8001bec:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001bee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001bf0:	fab2 f282 	clz	r2, r2
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	f042 0220 	orr.w	r2, r2, #32
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	f002 021f 	and.w	r2, r2, #31
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f202 	lsl.w	r2, r1, r2
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d13a      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0b2      	b.n	8001d76 <HAL_RCC_ClockConfig+0x2de>
 8001c10:	2302      	movs	r3, #2
 8001c12:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	095b      	lsrs	r3, r3, #5
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d102      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x1a0>
 8001c32:	4b31      	ldr	r3, [pc, #196]	@ (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	e00d      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1bc>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c3e:	fa93 f3a3 	rbit	r3, r3
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c44:	2302      	movs	r3, #2
 8001c46:	623b      	str	r3, [r7, #32]
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	61fb      	str	r3, [r7, #28]
 8001c50:	4b29      	ldr	r3, [pc, #164]	@ (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c54:	2202      	movs	r2, #2
 8001c56:	61ba      	str	r2, [r7, #24]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	fa92 f2a2 	rbit	r2, r2
 8001c5e:	617a      	str	r2, [r7, #20]
  return result;
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	fab2 f282 	clz	r2, r2
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	f042 0220 	orr.w	r2, r2, #32
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	f002 021f 	and.w	r2, r2, #31
 8001c72:	2101      	movs	r1, #1
 8001c74:	fa01 f202 	lsl.w	r2, r1, r2
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e079      	b.n	8001d76 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c82:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f023 0203 	bic.w	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	491a      	ldr	r1, [pc, #104]	@ (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c94:	f7fe fc08 	bl	80004a8 <HAL_GetTick>
 8001c98:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9c:	f7fe fc04 	bl	80004a8 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e061      	b.n	8001d76 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 020c 	and.w	r2, r3, #12
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d1eb      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d214      	bcs.n	8001cfc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 0207 	bic.w	r2, r3, #7
 8001cda:	4906      	ldr	r1, [pc, #24]	@ (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b04      	ldr	r3, [pc, #16]	@ (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e040      	b.n	8001d76 <HAL_RCC_ClockConfig+0x2de>
 8001cf4:	40022000 	.word	0x40022000
 8001cf8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d08:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <HAL_RCC_ClockConfig+0x2e8>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	491a      	ldr	r1, [pc, #104]	@ (8001d80 <HAL_RCC_ClockConfig+0x2e8>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d26:	4b16      	ldr	r3, [pc, #88]	@ (8001d80 <HAL_RCC_ClockConfig+0x2e8>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4912      	ldr	r1, [pc, #72]	@ (8001d80 <HAL_RCC_ClockConfig+0x2e8>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d3a:	f000 f829 	bl	8001d90 <HAL_RCC_GetSysClockFreq>
 8001d3e:	4601      	mov	r1, r0
 8001d40:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <HAL_RCC_ClockConfig+0x2e8>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d48:	22f0      	movs	r2, #240	@ 0xf0
 8001d4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	fa92 f2a2 	rbit	r2, r2
 8001d52:	60fa      	str	r2, [r7, #12]
  return result;
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	fab2 f282 	clz	r2, r2
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	40d3      	lsrs	r3, r2
 8001d5e:	4a09      	ldr	r2, [pc, #36]	@ (8001d84 <HAL_RCC_ClockConfig+0x2ec>)
 8001d60:	5cd3      	ldrb	r3, [r2, r3]
 8001d62:	fa21 f303 	lsr.w	r3, r1, r3
 8001d66:	4a08      	ldr	r2, [pc, #32]	@ (8001d88 <HAL_RCC_ClockConfig+0x2f0>)
 8001d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001d6a:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <HAL_RCC_ClockConfig+0x2f4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fb56 	bl	8000420 <HAL_InitTick>
  
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3778      	adds	r7, #120	@ 0x78
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000
 8001d84:	08001ea8 	.word	0x08001ea8
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	20000004 	.word	0x20000004

08001d90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001daa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d002      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x30>
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x36>
 8001dbe:	e026      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dc0:	4b19      	ldr	r3, [pc, #100]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dc2:	613b      	str	r3, [r7, #16]
      break;
 8001dc4:	e026      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	0c9b      	lsrs	r3, r3, #18
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	4a17      	ldr	r2, [pc, #92]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dd0:	5cd3      	ldrb	r3, [r2, r3]
 8001dd2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001dd4:	4b13      	ldr	r3, [pc, #76]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	4a14      	ldr	r2, [pc, #80]	@ (8001e30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dde:	5cd3      	ldrb	r3, [r2, r3]
 8001de0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dec:	4a0e      	ldr	r2, [pc, #56]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	e004      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a0c      	ldr	r2, [pc, #48]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	613b      	str	r3, [r7, #16]
      break;
 8001e0c:	e002      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e0e:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e10:	613b      	str	r3, [r7, #16]
      break;
 8001e12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e14:	693b      	ldr	r3, [r7, #16]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	371c      	adds	r7, #28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	007a1200 	.word	0x007a1200
 8001e2c:	08001eb8 	.word	0x08001eb8
 8001e30:	08001ec8 	.word	0x08001ec8
 8001e34:	003d0900 	.word	0x003d0900

08001e38 <memset>:
 8001e38:	4402      	add	r2, r0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d100      	bne.n	8001e42 <memset+0xa>
 8001e40:	4770      	bx	lr
 8001e42:	f803 1b01 	strb.w	r1, [r3], #1
 8001e46:	e7f9      	b.n	8001e3c <memset+0x4>

08001e48 <__libc_init_array>:
 8001e48:	b570      	push	{r4, r5, r6, lr}
 8001e4a:	4d0d      	ldr	r5, [pc, #52]	@ (8001e80 <__libc_init_array+0x38>)
 8001e4c:	4c0d      	ldr	r4, [pc, #52]	@ (8001e84 <__libc_init_array+0x3c>)
 8001e4e:	1b64      	subs	r4, r4, r5
 8001e50:	10a4      	asrs	r4, r4, #2
 8001e52:	2600      	movs	r6, #0
 8001e54:	42a6      	cmp	r6, r4
 8001e56:	d109      	bne.n	8001e6c <__libc_init_array+0x24>
 8001e58:	4d0b      	ldr	r5, [pc, #44]	@ (8001e88 <__libc_init_array+0x40>)
 8001e5a:	4c0c      	ldr	r4, [pc, #48]	@ (8001e8c <__libc_init_array+0x44>)
 8001e5c:	f000 f818 	bl	8001e90 <_init>
 8001e60:	1b64      	subs	r4, r4, r5
 8001e62:	10a4      	asrs	r4, r4, #2
 8001e64:	2600      	movs	r6, #0
 8001e66:	42a6      	cmp	r6, r4
 8001e68:	d105      	bne.n	8001e76 <__libc_init_array+0x2e>
 8001e6a:	bd70      	pop	{r4, r5, r6, pc}
 8001e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e70:	4798      	blx	r3
 8001e72:	3601      	adds	r6, #1
 8001e74:	e7ee      	b.n	8001e54 <__libc_init_array+0xc>
 8001e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e7a:	4798      	blx	r3
 8001e7c:	3601      	adds	r6, #1
 8001e7e:	e7f2      	b.n	8001e66 <__libc_init_array+0x1e>
 8001e80:	08001ed8 	.word	0x08001ed8
 8001e84:	08001ed8 	.word	0x08001ed8
 8001e88:	08001ed8 	.word	0x08001ed8
 8001e8c:	08001edc 	.word	0x08001edc

08001e90 <_init>:
 8001e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e92:	bf00      	nop
 8001e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e96:	bc08      	pop	{r3}
 8001e98:	469e      	mov	lr, r3
 8001e9a:	4770      	bx	lr

08001e9c <_fini>:
 8001e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9e:	bf00      	nop
 8001ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ea2:	bc08      	pop	{r3}
 8001ea4:	469e      	mov	lr, r3
 8001ea6:	4770      	bx	lr
